#
# Custom VCL
#
# See the VCL chapters in the Users Guide at https://www.varnish-cache.org/docs/
# and https://www.varnish-cache.org/trac/wiki/VCLExamples for more examples.

# Marker to tell the VCL compiler that this VCL has been adapted to the new 4.0 format
vcl 4.0;

# Import standrad library with common helpful functions for strings, time, etc.
import std;

# Default backend definition
backend default {
  .host = "<%= @backend[:host] %>";
  .port = "<%= @backend[:port_item][:port] %>";
}

# IP addresses that are allowed to purge
acl purge {
  "localhost";
  "127.0.0.1";
  "::1";
}

sub vcl_init {
  # Called when VCL is loaded, before any requests pass through it.
  # Typically used to initialize VMODs.
}

sub vcl_recv {
  # Called at the beginning of a request, after the complete request has been received and parsed.
  # Its purpose is to decide whether or not to serve the request, how to do it, and, if applicable, which backend to use.
  # Also used to modify the request

  # Allow purging
  if (req.method == "PURGE") {
    if (!client.ip ~ purge) { # purge is the ACL defined at the begining
      # Not from an allowed IP? Then die with an error.
      return (synth(405, "This IP is not allowed to send PURGE requests."));
    }
    # If you got this stage (and didn't error out above), purge the cached result
    return (purge);
  }

  # Only deal with "normal" types
  if (req.method != "GET" &&
  req.method != "HEAD" &&
  req.method != "PUT" &&
  req.method != "POST" &&
  req.method != "TRACE" &&
  req.method != "OPTIONS" &&
  req.method != "PATCH" &&
  req.method != "DELETE") {
    /* Non-RFC2616 or CONNECT which is weird. */
    /*Why send the packet upstream, while the visitor is using a non-valid HTTP method? */
    return (synth(404, "Non-valid HTTP method!"));
  }

  # Implementing websocket support (https://www.varnish-cache.org/docs/4.0/users-guide/vcl-example-websockets.html)
  if (req.http.Upgrade ~ "(?i)websocket") {
    return (pipe);
  }

  # Large static files are delivered directly to the end-user without waiting for Varnish to fully read the file first.
  # Varnish 4 fully supports Streaming, so set do_stream in vcl_backend_response()
  if (req.url ~ "^[^?]*\.(7z|avi|bz2|flac|flv|gz|mka|mkv|mov|mp3|mp4|mpeg|mpg|ogg|ogm|opus|rar|tar|tgz|tbz|txz|wav|webm|xz|zip)(\?.*)?$") {
    return(pass);
  }

  # Only cache GET or HEAD requests. This makes sure the POST requests are always passed.
  if (req.method != "GET" && req.method != "HEAD") {
    return (pass);
  }

  # Do not cache pages with authorizations
  if (req.http.Authorization) {
    return (pass);
  }

  <% if @regexp[:pipe_urls_item][:regexp].count > 0 -%>
  # Force pipe on these specific URLs
  if (
  <% i = 0 -%>
  <% @regexp[:pipe_urls_item][:regexp].each do |url| -%>
  <% if i > 0 %>|| <% end %>req.url ~ "<%= url %>"
  <% i += 1 -%>
  <% end -%>
  ) {
    return(pipe);
  }
  <% end %>

  <% if @regexp[:bypass_cache_urls_item][:regexp].count > 0 -%>
  # Bypass caching on these specific URLs
  if (
  <% i = 0 -%>
  <% @regexp[:bypass_cache_urls_item][:regexp].each do |url| -%>
  <% if i > 0 %>|| <% end %>req.url ~ "<%= url %>"
  <% i += 1 -%>
  <% end -%>
  ) {
    return(pass);
  }
  <% end -%>

  # Remove cookies in the request EXCEPT for these specific URLs
  if (
  req.http.Cookie
  <% @regexp[:allow_cookie_urls_item][:regexp].each do |url| -%>
  && !req.url ~ "<%= url %>"
  <% end -%>
  ) {
    unset req.http.Cookie;
  }

  # Do not cache pages with cookies if they are still set at this point
  if (req.http.Cookie) {
    return (pass);
  }

  return (hash);
}

sub vcl_hash {
  # Called after vcl_recv to create a hash value for the request
  # This is used as a key to look up the object in Varnish.

  # Set the base host
  set  req.http.Host = "<%= @config[:http_host] %>";

  # Remove the proxy header (see https://httpoxy.org/#mitigate-varnish)
  unset req.http.proxy;

  # Set the user's IP instead of the server's
  #unset req.http.X-Forwarded-For;
  #set  req.http.X-Forwarded-For = client.ip;

  # Send Surrogate-Capability headers to announce ESI support to backend
  set req.http.Surrogate-Capability = "key=ESI/1.0";

  # Normalize the query arguments
  set  req.url = std.querysort(req.url);

  <% if @regexp[:url_parameters_item][:regexp].count > 0 -%>
  # Generic URL manipulation that removes specific params from the query string if they are present
  if (req.url ~ "(\?|&)(<%= @regexp[:url_parameters_item][:regexp].join('|') %>)=") {
    set req.url = regsuball(req.url, "(<%= @regexp[:url_parameters_item][:regexp].join('|') %>)=[-_A-z0-9+()%.]+&?", "");
    set req.url = regsub(req.url, "[?|&]+$", "");
  }
  <% end -%>

  # Strip hash (#) if present
  if (req.url ~ "\#") {
    set req.url = regsub(req.url, "\#.*$", "");
  }

  # Strip a trailing ? if it is present
  if (req.url ~ "\?$") {
    set req.url = regsub(req.url, "\?$", "");
  }

  # Add page URL to hash data
  hash_data(req.url);

  # Add host to hash data
  if (req.http.host) {
    hash_data(req.http.host);
  } else {
    hash_data(server.ip);
  }

  # Add cookies to hash if they are present
  if (req.http.Cookie) {
    hash_data(req.http.Cookie);
  }
}

sub vcl_pipe {
  # Called upon entering pipe mode.
  # In this mode, the request is passed on to the backend, and any further data from both the client
  # and backend is passed on unaltered until either end closes the connection. Basically, Varnish will
  # degrade into a simple TCP proxy, shuffling bytes back and forth. For a connection in pipe mode,
  # no other VCL subroutine will ever get called after vcl_pipe.

  # Note that only the first request to the backend will have
  # X-Forwarded-For set.  If you use X-Forwarded-For and want to
  # have it set for all requests, make sure to have:
  # set bereq.http.connection = "close";
  # here.  It is not set by default as it might break some broken web
  # applications, like IIS with NTLM authentication.

  # set bereq.http.Connection = "Close";

  # Implementing websocket support (https://www.varnish-cache.org/docs/4.0/users-guide/vcl-example-websockets.html)
  if (req.http.upgrade) {
    set bereq.http.upgrade = req.http.upgrade;
  }

  return (pipe);
}

sub vcl_pass {
  # Called upon entering pass mode. In this mode, the request is passed on to the backend, and the
  # backend's response is passed on to the client, but is not entered into the cache. Subsequent
  # requests submitted over the same client connection are handled normally.

  return (fetch);
}

sub vcl_hit {
  # Called when a cache lookup is successful

  # A direct cache hit
  if (obj.ttl >= 0s) {
    return (deliver);
  }

  # We have no fresh fish. Lets look at the stale ones.
  if (std.healthy(req.backend_hint)) {
    # Backend is healthy. Limit age to 10s.
    if (obj.ttl + 10s > 0s) {
      #set req.http.grace = "normal(limited)";
      return (deliver);
    } else {
      # No candidate for grace. Fetch a fresh object.
      return (miss);
    }
  } else {
    # backend is sick - use full grace
    if (obj.ttl + obj.grace > 0s) {
      #set req.http.grace = "full";
      return (deliver);
    } else {
      # no graced object.
      return (miss);
    }
  }

  # No cache hit
  return (miss);
}

sub vcl_miss {
  # Called after a cache lookup if the requested document was not found in the cache.
  # Its purpose is to decide whether or not to attempt to retrieve the document from the backend, and which backend to use.

  return (fetch);
}

sub vcl_backend_response {
  # Handle the HTTP request coming from the backend HTTP server
  # Called after the response headers have been successfully retrieved from the backend.

  # Use stale to answer immediately if expired less than 10 minutes
  set beresp.grace = 10m;

  # Pause ESI request and remove Surrogate-Control header
  if (beresp.http.Surrogate-Control ~ "ESI/1.0") {
    unset beresp.http.Surrogate-Control;
    set beresp.do_esi = true;
  }

  # Large static files are delivered directly to the end-user without waiting for Varnish to fully read the file first.
  # Varnish 4 fully supports Streaming, so use streaming here to avoid locking.
  if (bereq.url ~ "^[^?]*\.(7z|avi|bz2|flac|flv|gz|mka|mkv|mov|mp3|mp4|mpeg|mpg|ogg|ogm|opus|rar|tar|tgz|tbz|txz|wav|webm|xz|zip)(\?.*)?$") {
    # Check memory usage it'll grow in fetch_chunksize blocks (128k by default) if the backend doesn't send a Content-Length header, so only enable it for big objects
    set beresp.do_stream = true;
  }

  # Sometimes, a 301 or 302 redirect formed via Apache's mod_rewrite can mess with the HTTP port that is being passed along.
  # This often happens with simple rewrite rules in a scenario where Varnish runs on :80 and Apache on :8080 on the same box.
  # A redirect can then often redirect the end-user to a URL on :8080, where it should be :80.
  # This may need finetuning on your setup.
  #
  # To prevent accidental replace, we only filter the 301/302 redirects for now.
  if (beresp.status == 301 || beresp.status == 302) {
    set beresp.http.Location = regsub(beresp.http.Location, ":[0-9]+", "");
  }

  # Don't cache 50x responses
  if (beresp.status == 500 || beresp.status == 502 || beresp.status == 503 || beresp.status == 504) {
    return (abandon);
  }

  # Remove server set cookie headers EXCEPT on the following URLs
  if (
  beresp.http.set-cookie
  <% @regexp[:allow_cookie_urls_item][:regexp].each do |url| -%>
  && !req.url ~ "<%= url %>"
  <% end -%>
  ) {
    unset beresp.http.set-cookie;
  }

  # Forcefully set no-cache policy on these specific URLs
  if (
  bereq.method == "POST"
  <% @regexp[:no_cache_urls_item][:regexp].each do |url| -%>
  || bereq.url ~ "<%= url %>"
  <% end -%>
  ) {
    unset beresp.http.Cache-Control;
    unset beresp.http.Max-Age;
    unset beresp.http.Pragma;
    set beresp.http.Cache-Control = "max-age=0, private, no-cache";
    set beresp.ttl = 0s;
    set beresp.uncacheable = true;
  }

  # Set 0s TTL for responses with Set cookie commands, POST data, or vary controls
  if (beresp.http.Set-Cookie || beresp.http.Vary == "*") {
    set beresp.ttl = 0s;
    set beresp.uncacheable = true;
  }

  return (deliver);
}

sub vcl_deliver {
  # The routine when we deliver the HTTP request to the user
  # Last chance to modify headers that are sent to the client

  # Set header for hit/miss
  if (obj.hits > 0) {
    set resp.http.X-Cache = "HIT";
  } else {
    set resp.http.X-Cache = "MISS";
  }

  # Please note that obj.hits behaviour changed in 4.0, now it counts per objecthead, not per object
  # obj.hits may not be reset in some cases where bans are in use. See bug 1492 for details.
  # So take hits with a grain of salt
  set resp.http.X-Cache-Hits = obj.hits;

  # Display the remaining TTL for the object
  set resp.http.X-Cache-TTL = std.integer(obj.ttl, 0);

  # Remove some common server side headers
  unset resp.http.X-Powered-By; # PHP
  unset resp.http.Server;
  unset resp.http.Via;
  unset resp.http.X-Varnish;
  unset resp.http.X-Generator;
  #unset resp.http.Link;

  return (deliver);
}

sub vcl_purge {
  # Only handle actual PURGE HTTP methods, everything else is discarded
  if (req.method != "PURGE") {
    set req.http.X-Purge = "Yes";
    return (restart);
  }
}

sub vcl_synth {
  if (resp.status == 720) {
    # We use this special error status 720 to force redirects with 301 (permanent) redirects
    # To use this, call the following from anywhere in vcl_recv: return (synth(720, "http://host/new.html"));
    set resp.http.Location = resp.reason;
    set resp.status = 301;
    return (deliver);
  } elseif (resp.status == 721) {
    # And we use error status 721 to force redirects with a 302 (temporary) redirect
    # To use this, call the following from anywhere in vcl_recv: return (synth(720, "http://host/new.html"));
    set resp.http.Location = resp.reason;
    set resp.status = 302;
    return (deliver);
  }

  return (deliver);
}


sub vcl_fini {
  # Called when VCL is discarded only after all requests have exited the VCL.
  # Typically used to clean up VMODs.

  return (ok);
}